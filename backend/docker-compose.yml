version: "3.8"

networks:
  monitoring:
    driver: bridge

services:
  redis:
    container_name: redis
    image: redis

  django:
    container_name: django
    build: 
      context: .
    mem_limit: 512m
    # command: python manage.py runserver 0.0.0.0:8000
    # command: ["gunicorn", "--timeout", "1000", "--workers=1","-b", "0.0.0.0:8000","--log-level", "debug", "manage"]

    volumes:
      - .:/usr/src/app/
    ports:
      - "8000:8000"
    depends_on:
        # redis:
        db:
          condition: service_healthy
    entrypoint: sh -c "python3 manage.py makemigrations && python3 manage.py migrate && python manage.py collectstatic --noinput && exec gunicorn --timeout 90 --keep-alive 90 --workers=4 -b 0.0.0.0:8000 backend.wsgi:application"
    # entrypoint: sh -c "python3 manage.py makemigrations && python3 manage.py migrate && python3 manage.py loaddata ./user/fixtures/academy_dump_file.json && exec gunicorn backend.wsgi:application -b 0.0.0.0:8000"

    # restart:
    #   always

  celery:
    container_name: celery
    build: .
    command: celery -A backend worker -l info
    volumes:
      - .:/usr/src/app/
    depends_on:
      - redis
      - nginx

  db:
    image: mysql
    container_name: db
    environment:
      MYSQL_ROOT_PASSWORD: "root"
      MYSQL_USER: "forten"
      MYSQL_PASSWORD: "forten"
      MYSQL_DATABASE: "forten"
    ports:
      - "3306:3306"
    volumes:
      - ./data:/var/lib/mysql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      retries: 5
      timeout: 5s

  nginx:
    container_name: nginx
    build: 
      context: .
      dockerfile: nginx/Dockerfile # You need to create this file
    mem_limit: 512m
    ports:
      - "80:80"
    depends_on:
      - django

  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./prometheus/:/etc/prometheus/
      - ./prometheus/data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - 9090:9090
    networks:
      - monitoring
    restart: always

  node-exporter:
      image: prom/node-exporter
      volumes:
        - /proc:/host/proc:ro
        - /sys:/host/sys:ro
        - /:/rootfs:ro
      command:
        - '--path.procfs=/host/proc'
        - '--path.sysfs=/host/sys'
        - --collector.filesystem.ignored-mount-points
        - "^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)"
      ports:
        - 9100:9100
      restart: always
      networks:
        - monitoring

  alertmanager:
      image: prom/alertmanager
      ports:
        - 9093:9093
      volumes:
        - ./alertmanager/:/etc/alertmanager/
      networks:
        - monitoring
      restart: always
      # command:
      #   - '--config.file=/etc/alertmanager/config.yml'
      #   - '--storage.path=/alertmanager'

  cadvisor:
      image: google/cadvisor
      volumes:
        - /:/rootfs:ro
        - /var/run:/var/run:rw
        - /sys:/sys:ro
        - /var/lib/docker/:/var/lib/docker:ro
      ports:
        - 8080:8080
      networks:
        - monitoring
      restart: always


  grafana:
      image: grafana/grafana
      # user: "472"
      depends_on:
        - prometheus
      ports:
        - 3000:3000
      volumes:
        - ./grafana/data:/var/lib/grafana
        - ./grafana/provisioning/:/etc/grafana/provisioning/
      networks:
        - monitoring
      restart: always